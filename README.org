#+TITLE: zig-tinyrenderer

Goal is to slowly implement https://github.com/ssloy/tinyrenderer in zig for
learning purposes.

* 2023
** 2023-07 July
*** 2023-07-23 Sunday

**** Port TGA code [2023-07-23 Sun 20:53]
     :LOGBOOK:
     CLOCK: [2023-07-23 Sun 20:53]--[2023-07-23 Sun 21:55] =>  1:02
     :END:

https://github.com/ssloy/tinyrenderer/wiki/Lesson-0:-getting-started
https://github.com/ssloy/tinyrenderer/tree/909fe20934ba5334144d2c748805690a1fa4c89f

First goal is to port the TGA code, just enough to generate the example image
with the red dot. I could vendor this in and directly call the C++ code from
zig, but likely a better goal for learning zig to port.

I first start off by copying a flake.nix I had from an earlier project which
provides the latest zig. I then just ran =zig init-exe= and started hacking.

Interesting things are that =const= means that all bytes related to that
variable are immutable. This is unlike other languages and actually makes a
lot of sense. So I had to use var on the array I created for the TGA file. I
used Cody to work this out, I am starting to see the value of AI tools.

I spent a long time before this jumping back and forth between the zig learn
site, zig std library code and my editor. I think I am gonna experiment with
AI tools to help me write correct code. Additionally I need to go back over
the code and try and use things like memmove/memcopy in places.

After an hour I had something which wrote out stuff to disk, but was not the
TGA file format. Next time I will try make the file correct.

*** 2023-07-24 Monday

**** Buggy TGA writer [2023-07-24 Mon 21:55]

Only had 30min tonight, but have a rendering TGA file which looks buggy as
hell. Tomorrow I will have to compare hexdump output of this TGA writer vs the
reference one.

It was quite amazing though, I pasted in the TGAHeader struct from C++ into
Cody to translate and it did a great job, including =packed struct= to match
the pragma used in the C++ code! I think I could of pasted in all the code and
it would of done a decent job, but then I refrained since I wouldn't learn as
much that way.

*** 2023-07-25 Tuesday

**** hexl-mode diff [2023-07-25 Tue 21:57]

Ran the upstream code (switching off RLE (run length encoding) to compare TGA
output in a hex dump. This was fruitful:

First I wasn't initializing the pixels to 0. This was easy to do

: -    var data: [100 * 100]TGAColor = undefined;
: +    var data = [_]TGAColor{.{}} ** (100 * 100);

Then I noticed I was writing out RGBA but should just write out RGB. Finally I
was writing down the imagedescriptor as the value 20 instead 0x20.

Had a very short night (just 15min), so this was as far as I got. There is
still some discrepencies to dive into, hopefully my next session is longer.

** 2023-08 August
*** 2023-08-01 Tuesday

**** bresenham's line drawing algorithm first attempt [2023-08-01 Tue 21:39]
     :LOGBOOK:
     CLOCK: [2023-08-01 Tue 21:39]--[2023-08-01 Tue 21:59] =>  0:20
     :END:

https://github.com/ssloy/tinyrenderer/wiki/Lesson-1:-Bresenham%E2%80%99s-Line-Drawing-Algorithm

Only had a few minutes to hack, but did the first attempt. Zig seems a lot
more explicit at casting between ints and floats, so the code was a bit
verbose. Tried a bit to use cody to help with how to cast, but it generated
slightly incorrect names.

*** 2023-08-13 Sunday

**** profiling zig for attempt 4 at line drawing [2023-08-13 Sun 21:11]

I tried to profile the zig code as mentioned in the part about perf
optimization in the line drawing. Felt like this was a good opportunity to
expose myself to the tools.

First I tried to use =gprof= but that fails since I think you have to be
compiling with gcc to pass the =-pg= flag. Inspecting the output of =zig
build= gave no clues.

I then tried using perf. I got a bit further, but I don't think perf
understands the symbols in zig (likely need to pass some flag to build?). This
is what I did:

#+begin_example
nix-shell -p linuxKernel.packages.linux_6_1.perf
zig build
perf record -a -F 999 -g ./zig-out/bin/zig-tinyrenderer
perf script -i perf.data > ~/Downloads/profile.linux-perf.txt
#+end_example

I then opened that final file in https://www.speedscope.app/ which is really
neat. I always find using the FlameGraph repo super clunky, so was nice to
find a convenient interface.

While I was doing all of this I also downloaded Xcode on my macbook to try out
Instruments. I created a time profile then made it target the zig binary. Ran
it and it gave me great output straight away. This was a pleasant experience.
In this case it told me that we spend 98.2% of the time in line, 40% of which
is in calling set. I am guessing by removing the floating point stuff we
should be able to get to set being much closer to the time spent.

I then remember valgrind so tried that out on linux again. Given it isn't a
sampling profiler it is very slow.

#+begin_example
nix-shell -p valgrind kcachegrind
valgrind --tool=callgrind ./zig-out/bin/zig-tinyrenderer
kcachegrind callgrind.out.17062
#+end_example

This also was missing function names. I am now convinced that error is PEBKAC
so let me see if I can get debug info in my binary. I failed after toggling
many a flag. Reading the build.zig and then reading TigerBeetles build.zig
makes me like zig more though. Still don't know why I can't get it sorted out.

Googling didn't give me much like, likely time to dust off my discord
accounts. Additionally there was some mention of tracy, but that seems to be
about instrumenting your code with spans which likely isn't as useful here vs
a sampling profiler.

Next hacking session I'll likely spend my time measuring relative perf
improvement with something like hyperfine. Additionally the valgrind output is
actually alright but I just need to guess the names of the symbols.

*** 2023-08-17 Thursday

**** floats are faster [2023-08-17 Thu 16:50]

I probably need to experiment with better compilation options, but I the
floats implementation was faster. Here is the dog ugly port for not using
floats:

#+begin_src zig
  fn line(x0_: u32, y0_: u32, x1_: u32, y1_: u32, image: *TGAImage, color: TGAColor) void {
      var x0: i32 = @as(i32, @intCast(x0_));
      var x1: i32 = @as(i32, @intCast(x1_));
      var y0: i32 = @as(i32, @intCast(y0_));
      var y1: i32 = @as(i32, @intCast(y1_));

      // algorithm longs along x axis, so transpose if the line is longer in the
      // y axis for better fidelity.
      const transposed = dist(i32, x0, x1) < dist(i32, y0, y1);
      if (transposed) {
          std.mem.swap(i32, &x0, &y0);
          std.mem.swap(i32, &x1, &y1);
      }

      if (x0 > x1) {
          std.mem.swap(i32, &x0, &x1);
          std.mem.swap(i32, &y0, &y1);
      }

      const dx = x1 - x0;
      const dy: i32 = y1 - y0;
      var derror2 = dy * 2;
      if (derror2 < 0) {
          derror2 *= -1;
      }
      var error2: i32 = 0;
      var y = y0;

      var x: i32 = x0;
      while (x <= x1) : (x += 1) {
          if (transposed) {
              image.set(@as(u32, @intCast(y)), @as(u32, @intCast(x)), color);
          } else {
              image.set(@as(u32, @intCast(x)), @as(u32, @intCast(y)), color);
          }
          error2 += derror2;
          if (error2 > dx) {
              y += if (y1 > y0) 1 else -1;
              error2 -= dx * 2;
          }
      }
  }
#+end_src

And the hyperfine output:

#+begin_example
  Benchmark 1: ./zig-out/bin/zig-tinyrenderer
    Time (mean ± σ):      1.501 s ±  0.002 s    [User: 1.486 s, System: 0.014 s]
    Range (min … max):    1.497 s …  1.503 s    10 runs

  Benchmark 2: ./zig-out/bin/zig-tinyrenderer-floats
    Time (mean ± σ):      1.496 s ±  0.001 s    [User: 1.483 s, System: 0.013 s]
    Range (min … max):    1.495 s …  1.499 s    10 runs

  Summary
    './zig-out/bin/zig-tinyrenderer-floats' ran
      1.00 ± 0.00 times faster than './zig-out/bin/zig-tinyrenderer'
#+end_example

**** testing with ReleaseFast [2023-08-17 Thu 16:54]

Enabling optimizations made a big difference. But it made the float code even
faster. Maybe this is something to do with the M2?

: zig build -Doptimize=ReleaseFast

#+begin_example
  Benchmark 1: ./zig-out/bin/zig-tinyrenderer
    Time (mean ± σ):     261.9 ms ± 140.1 ms    [User: 218.1 ms, System: 2.8 ms]
    Range (min … max):   217.0 ms … 660.7 ms    10 runs

    Warning: The first benchmarking run for this command was significantly slower than the rest (660.7 ms). This could be caused by (filesystem) caches that were not filled until after the first run. You should consider using the '--warmup' option to fill those caches before the actual benchmark. Alternatively, use the '--prepare' option to clear the caches before each timing run.

  Benchmark 2: ./zig-out/bin/zig-tinyrenderer-floats
    Time (mean ± σ):     202.2 ms ± 143.9 ms    [User: 157.7 ms, System: 2.3 ms]
    Range (min … max):   156.3 ms … 611.7 ms    10 runs

    Warning: The first benchmarking run for this command was significantly slower than the rest (611.7 ms). This could be caused by (filesystem) caches that were not filled until after the first run. You should consider using the '--warmup' option to fill those caches before the actual benchmark. Alternatively, use the '--prepare' option to clear the caches before each timing run.

  Summary
    './zig-out/bin/zig-tinyrenderer-floats' ran
      1.30 ± 1.15 times faster than './zig-out/bin/zig-tinyrenderer'
#+end_example

* 2024
** 2024-01 January
*** 2024-01-09 Tuesday

**** getting back on the cart [2024-01-09 Tue 09:06]
     :LOGBOOK:
     CLOCK: [2024-01-09 Tue 09:06]
     :END:

Trying to work out where I was. I think I am still on the first lesson here
https://github.com/ssloy/tinyrenderer/wiki/Lesson-1:-Bresenham%E2%80%99s-Line-Drawing-Algorithm#wireframe-rendering

I have less than 30min, so will have the goal of just parsing the very first
line from the object file.

I remember reading some zig code on nice ways to just read files. I have vague
memories of liking something from the zig repo tools dir. Will try find that
and use it.

I am looking at the patterns in =tools/docgen.zig=. The first change I make is
to use =ArgIterator= instead of directly using =os.argv=. Main benefit is the
code is nicer, cross platform and I get zig style strings instead of c's null
terminated strings. This makes it easier to then open a file.
